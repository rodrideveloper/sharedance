rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTeacher() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    function isStudent() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isAdminOrTeacher() {
      return isAdmin() || isTeacher();
    }
    
    function isValidUser(user) {
      return user.keys().hasAll(['userId', 'email', 'name', 'role', 'isActive']) &&
             user.role in ['admin', 'teacher', 'student'] &&
             user.isActive is bool &&
             user.email is string &&
             user.name is string &&
             user.userId is string;
    }
    
    function isValidClass(classData) {
      return classData.keys().hasAll(['id', 'name', 'professorId', 'duration', 'maxStudents', 'price', 'isActive']) &&
             classData.duration is number &&
             classData.maxStudents is number &&
             classData.price is number &&
             classData.isActive is bool;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       isOwner(userId) && 
                       isValidUser(request.resource.data) &&
                       request.resource.data.userId == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Classes collection
    match /classes/{classId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrTeacher() && isValidClass(request.resource.data);
      allow update: if isAdmin() || 
                       (isTeacher() && resource.data.professorId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Schedules collection
    match /schedules/{scheduleId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrTeacher();
      allow update: if isAdmin() || 
                       (isTeacher() && resource.data.professorId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Reservations collection
    match /reservations/{reservationId} {
      allow read: if isAuthenticated() && 
                     (isAdmin() || 
                      resource.data.userId == request.auth.uid ||
                      resource.data.professorId == request.auth.uid);
      allow create: if isAuthenticated() && 
                       isStudent() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() || 
                       resource.data.userId == request.auth.uid ||
                       resource.data.professorId == request.auth.uid;
      allow delete: if isAdmin();
    }

    // Payments collection
    match /payments/{paymentId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.userId);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Reports collection (only for admins and the specific teacher)
    match /reports/{reportId} {
      allow read: if isAdmin() || 
                     (isTeacher() && resource.data.professorId == request.auth.uid);
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
  }
}
